#! /bin/bash

# =============================================================================
#
# web-interface
# -----------------
#
# This script contains several  functions that provide an interface to
# the CernVM virtual machine web interface and return a success or failure, 
# which can be used to generate a TAP report.
#
# These functions can be utilized to create test cases in cernvm-testcases or 
# can be executed individually as precondition tests
#
# =============================================================================

HEADER=('')
# The base template http header used
TEMPLATE_HEADER=(
'Host: 192.168.1.139:8004' \
'User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.17) Gecko/20110428 Fedora/3.6.17-1.fc13 Firefox/3.6.17' \
'Accept-Language: en-us,en;q=0.5' \
'Accept-Encoding: gzip,deflate' \
'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7' \
'Keep-Alive: 115' \
'Connection: keep-alive')
ADDITIONAL_HEADER=('')

# List of web interface related log files
WEBINTERFACE="web_interface.log"


# Generate an http header using the template header and
# any additional header values defined
generate_header()
{
	HEADER=('-H' "${TEMPLATE_HEADER[0]}")

	for i in $(seq 1 $((${#TEMPLATE_HEADER[@]} - 1)))
	do
		HEADER=("${HEADER[@]}" '-H' "${TEMPLATE_HEADER[i]}")
	done

	for value in "${ADDITIONAL_HEADER[@]}"
	do
		HEADER=("${HEADER[@]}" '-H' "$value")
	done
}


# Verify that virtual machine has web interface support
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The name of the logfile
has_web_interface()
{
	curl -i -v http://$1:8004/login > $2 2>&1

	# Check that curl didn't return any error codes, then verify that the
	# page is actually the CernVM web interface
	RESULT=1
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "CernVM Software Appliance" $2 ; test "$?" -eq 0 \
		&& grep -q -e '<body id="page-login">' $2 ; test "$?" -eq 0
		then
			RESULT=0
		fi
	fi

	return $RESULT
}


# Verify that it is possible to login on web interface
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The web interface username, usually admin
# @param $3 - The web interface password for the user
# @param $4 - The name of the logfile
web_check_login()
{
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
					   'Content-Type: application/x-www-form-urlencoded' \
					   "Referer: http://$1:8004/login")

	generate_header
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --data "user_name=$2" --data "password=$3" \
	--data "login=Login" --location-trusted http://$1:8004/login > $4 2>&1

	
	# Check that curl didn't have any error return codes, then verify that it was
	# was possible to login on the web interface by validating that curl was 
	# redirected to the status page
	RESULT=1
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "HTTP/1.1 403 Forbidden" $4 ; test "$?" -eq 1 && grep -q \
		-e "Location: http://$1:8004/status/Status/" $4 ; test "$?" -eq 0 && grep \
		-q -e '<title>CernVM Software Appliance - Appliance Status</title>' \
		$4 ; test "$?" -eq 0
		then
			RESULT=0
		fi
	fi

	return $RESULT
}


# Create a new user using the CernVM web interface
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The name of the new user to create
# @param $3 - The password for the new user
# @param $4 - The name of the logfile
web_create_user()
{
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: application/json' \
					   'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
					   "Referer: http://$1:8004/cernvm/User/" \
					   'Pragma: no-cache' \
					   'Cache-Control: no-cache')

	generate_header
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --data "cernvmUser=$2" --data \
	"cernvmUserGroup=alice" --data "cernvmUserShell=%2Fbin%2Fbash" --data "newpass1=$3" \
	--data "newpass2=$3" --location-trusted http://$1:8004/cernvm/User/userUpdate \
	> $4 2>&1
	
	# Check that curl didn't have any error return codes, then verify that the
	# new user created through the webinterface succeeded 
	RESULT=1
	if [ "$?" -eq 0 ]
	then
		if egrep -q '^\{\"message\"\:[[:space:]]*\"Completed[[:space:]]*Successfully\"\,
		[[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"page\"\:[[:space:]]*\"\"\,
		[[:space:]]*\"schedId\"\:[[:space:]]*[[:digit:]]*\}' $4 ; test "$?" -eq 0
		then	
			RESULT=0
		fi
	fi

	return $RESULT
}


# Restart through the web interface and check there are no error messages at boot
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The name of the web reboot logfile
# @param $3 - The name of the boot error logfile
web_restart()
{
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: application/json' \
					   'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
					   "Referer: http://$1:8004/reboot/Reboot/" \
					   'Pragma: no-cache' \
					   'Cache-Control: no-cache')

	generate_header
	echo "${HEADER[@]}"
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --location-trusted \
	http://$1:8004/reboot/Reboot/rebootNow > $2 2>&1

	# Check that curl didn't have any error return codes, then verify that the
	# webinterface restart succeeded 
	RESULT=1
	if [ "$?" -eq 0 ]
	then
		if egrep -q '^\{\"message\"\:[[:space:]]*\"Rebooting[[:space:]]*now\.\"\,
		[[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"schedId\"\:
		[[:space:]]*[[:digit:]]*\}' $2 ; test "$?" -eq 0
		then
			sleep 120
			check_boot_error $1 $3
			if [ "$?" -eq 0 ]
			then
				RESULT=0
			fi
		fi
	fi

	return $RESULT
}
