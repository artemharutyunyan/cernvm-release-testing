#! /bin/bash

# =============================================================================
#
# web-interface
# -----------------
#
# This script contains several  functions that provide an interface to
# the CernVM virtual machine web interface and return a success or failure, 
# which can be used to generate a TAP report.
#
# These functions can be utilized to create test cases in cernvm-testcases or 
# can be executed individually as precondition tests
#
# =============================================================================

HEADER=('')
# The base template http header used
TEMPLATE_HEADER=('')
ADDITIONAL_HEADER=('')

# List of web interface related log files
WEBINTERFACE="web_interface.log"


# TODO: PERHAPS GENERATE DIFFERENT USER-AGENT BASED ON HOST OS
# Generate a HTTP template header for the current hypervisor which
# is a basis to generate headers for different web-interface functions
# @param $1 - The hostname or ip address for the web interface
generate_template_header()
{
	TEMPLATE_HEADER=(
	"Host: $1:8004" \
	'User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.17) Gecko/20110428 Fedora/3.6.17-1.fc13 Firefox/3.6.17' \
	'Accept-Language: en-us,en;q=0.5' \
	'Accept-Encoding: gzip,deflate' \
	'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7' \
	'Keep-Alive: 115' \
	'Connection: keep-alive')

	# Export the TEMPLATE globally
	export TEMPLATE_HEADER
}


# Generate an http header using the template header and
# any additional header values defined
generate_header()
{
	HEADER=('-H' "${TEMPLATE_HEADER[0]}")

	for i in $(seq 1 $((${#TEMPLATE_HEADER[@]} - 1)))
	do
		HEADER=("${HEADER[@]}" '-H' "${TEMPLATE_HEADER[i]}")
	done

	for value in "${ADDITIONAL_HEADER[@]}"
	do
		HEADER=("${HEADER[@]}" '-H' "$value")
	done
}


# Verify that virtual machine has web interface support
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The name of the logfile
web_check_interface()
{
	RESULT=1

	curl -i -v http://$1:8004/login > $2 2>&1

	# Check that curl didn't return any error codes, then verify that the
	# page is actually the CernVM web interface	
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "CernVM Software Appliance" $2 ; test "$?" -eq 0 \
		&& grep -q -e '<body id="page-login">' $2 ; test "$?" -eq 0
		then
			RESULT=0
		fi
	fi

	return $RESULT
}


# Verify that it is possible to login on web interface
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The web interface username, usually admin
# @param $3 - The web interface password, by default password
# @param $4 - The name of the logfile
web_check_login()
{
	RESULT=1
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
					   'Content-Type: application/x-www-form-urlencoded' \
					   "Referer: http://$1:8004/login")

	generate_header
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --data "user_name=$2" --data "password=$3" \
	--data "login=Login" --location-trusted http://$1:8004/login > $4 2>&1
	
	# Check that curl didn't have any error return codes, then verify that it was
	# was possible to login on the web interface by validating that curl was 
	# redirected to the status page
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "HTTP/1.1 403 Forbidden" $4 ; test "$?" -eq 1  && egrep \
		-q '<title>CernVM[[:space:]]*Software[[:space:]]*Appliance.*</title>' \
		$4 ; test "$?" -eq 0
		then
			RESULT=0
		fi
	fi

	return $RESULT
}


# TODO: ADD SUPPORT TO ACTUALLY SPECIFY PROXY SETTINGS
# Configure the proxy settings using the CernVM web interface
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The name of the logfile
web_config_proxy()
{
	RESULT=1
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: application/json' \
					   'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
					   "Referer: http://$1:8004/configure/Proxy/" \
					   'Pragma: no-cache' \
					   'Cache-Control: no-cache')

	generate_header
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --data "httpProxy=" \
	--data "httpPort=" --data "httpUser=" --data "httpPass=" --data "httpsProxy=" \
	--data "httpsPort=" --data "httpsUser=" --data "httpsPass=" --location-trusted \
	http://$1:8004/configure/Proxy/saveProxy > $2 2>&1
	
	# Check that curl didn't have any error return codes, then verify that the
	# proxy settings configured through the web interface succeeded 
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "HTTP/1.1 403 Forbidden" $2 ; test "$?" -eq 1
		then
			RESULT=0
		fi
	fi

	return $RESULT
}


# Configure the web interface administrator password using the CernVM web interface
# @param $1 - The hostname or ip address for the web interface
# @param $2	- The new web interface administration password
# @param $3 - The name of the logfile
web_config_password()
{
	RESULT=1
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: application/json' \
					   'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
					   "Referer: http://$1:8004/changepassword/ChangePassword/" \
					   'Pragma: no-cache' \
					   'Cache-Control: no-cache')

	generate_header
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --data "pwd1=$2" \
	--data "pwd2=$2" --location-trusted \
	http://$1:8004/changepassword/ChangePassword/changePassword > $3 2>&1
	
	# Check that curl didn't have any error return codes, then verify that the
	# web interface admin password configured through the web interface succeeded
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "HTTP/1.1 403 Forbidden" $3 ; test "$?" -eq 1  && egrep \
		-q '^\{\"message\"\:[[:space:]]*\"Password[[:space:]]*changed\"\,
		[[:space:]]*\"page\"\:[[:space:]]*\"changePassword\"\}' $3 ; test "$?" -eq 0
		then
			RESULT=0
		fi
	fi

	return $RESULT
}


# Configure the CernVM image desktop settings using the CernVM web interface
# @param $1 - The hostname or ip address for the web interface
# @param $2	- Configure startx on boot, accepted values are on or off
# @param $3 - The CernVM image desktop resolution
# @param $4	- The CernVM image keyboard locale
# @param $5 - The name of the logfile
web_config_desktop()
{
	RESULT=1
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: application/json' \
					   'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
					   "Referer: http://$1:8004/cernvm/Config/" \
					   'Pragma: no-cache' \
					   'Cache-Control: no-cache')

	generate_header
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --data "cernvmEdition=Desktop" \
	--data "cernvmScreenRes=$3" --data "cernvmKeyboard=$4" --data "cernvmStartXDM=$2" \
	--location-trusted http://$1:8004/cernvm/Config/editionUpdate > $5 2>&1
	
	# Check that curl didn't have any error return codes, then verify that the
	# web interface admin password configured through the web interface succeeded
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "HTTP/1.1 403 Forbidden" $5 ; test "$?" -eq 1  && egrep -q \
		'^\{\"message\"\:[[:space:]]*\"Completed[[:space:]]*Successfully\"\,
		[[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"page\"\:[[:space:]]*\"\"\,
		[[:space:]]*\"schedId\"\:[[:space:]]*[[:digit:]]*\}' $5 ; test "$?" -eq 0
		then
			RESULT=0
		fi
	fi

	return $RESULT
}


# TODO: ENABLE AN ARRAY / LIST OF APPLIANCE GROUPS
# Configure the CernVM image appliance group settings using the CernVM web interface
# @param $1 - The hostname or ip address for the web interface
# @param $2	- The appliance primary group, all capitals, only one group may be specified
# @param $3 - The name of the logfile
web_config_group()
{
	RESULT=1
	GROUP_REPOSITORY=""
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: application/json' \
					   'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
					   "Referer: http://$1:8004/cernvm/Config/" \
					   'Pragma: no-cache' \
					   'Cache-Control: no-cache')

	# Set the repository based on the primary group specified
	case "$2" in
	"ALICE")
	  GROUP_REPOSITORY="alice"
	  ;;
	"ATLAS")
	  GROUP_REPOSITORY="atlas%2Batlas%2Dcondb%2Cgrid"
	  ;;
	"CMS")
	  GROUP_REPOSITORY="cms%2Bgrid"
	  ;;
	"LHCB")
	  GROUP_REPOSITORY="lhcb%2Bgrid"
	  ;;
	"LCD")
	  GROUP_REPOSITORY="lcd%2Bgrid%2Bsft"
	  ;;
	"NA61")
	  GROUP_REPOSITORY="na61%2Bsft"
	  ;;
	"HONE")
	  GROUP_REPOSITORY="hone%2Bsft%2Bgrid"
	  ;;
	"HEPSOFT")
	  GROUP_REPOSITORY="hepsoft%2Bsft"
	  ;;
	"BOSS")
	  GROUP_REPOSITORY="boss"
	  ;;
	"GEANT4")
	  GROUP_REPOSITORY="geant4%2Bgrid%2Bsft"
	  ;;
	*)
	  # Incorrect primary group specified, return failure
	  return $RESULT
	  ;;
	esac

	generate_header
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" \
	--data "cernvmOrganisation=$2" --data "cernvmRepositories=$GROUP_REPOSITORY" \
	--location-trusted http://$1:8004/cernvm/Config/repositoriesUpdate > $3 2>&1
	
	# Check that curl didn't have any error return codes, then verify that the
	# web interface admin password configured through the web interface succeeded
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "HTTP/1.1 403 Forbidden" $3 ; test "$?" -eq 1  && egrep -q \
		'^\{\"message\"\:[[:space:]]*\"Completed[[:space:]]*Successfully\"\,
		[[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"page\"\:[[:space:]]*\"\"\,
		[[:space:]]*\"schedId\"\:[[:space:]]*[[:digit:]]*\}' $3 ; test "$?" -eq 0
		then
			RESULT=0
		fi
	fi

	return $RESULT
}


# Create a new user using the CernVM web interface
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The name of the new user to create
# @param $3 - The password for the new user
# @param $4	- The group for the new user
# @param $5 - The name of the logfile
web_create_user()
{
	RESULT=1
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: application/json' \
					   'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
					   "Referer: http://$1:8004/cernvm/User/" \
					   'Pragma: no-cache' \
					   'Cache-Control: no-cache')

	generate_header
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --data "cernvmUser=$2" --data \
	"cernvmUserGroup=$4" --data "cernvmUserShell=%2Fbin%2Fbash" --data "newpass1=$3" \
	--data "newpass2=$3" --location-trusted http://$1:8004/cernvm/User/userUpdate \
	> $5 2>&1
	
	# Check that curl didn't have any error return codes, then verify that the
	# new user created through the web interface succeeded 
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "HTTP/1.1 403 Forbidden" $5 ; test "$?" -eq 1 && egrep -q \
		'^\{\"message\"\:[[:space:]]*\"Completed[[:space:]]*Successfully\"\,
		[[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"page\"\:[[:space:]]*\"\"\,
		[[:space:]]*\"schedId\"\:[[:space:]]*[[:digit:]]*\}' $5 ; test "$?" -eq 0
		then	
			RESULT=0
		fi
	fi

	return $RESULT
}


# Apply settings configured for the CernVM image using the CernVM web interface, 
# which then reboots the CernVM image once completed
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The name of the logfile
web_apply_settings()
{
	RESULT=1
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
					   'Content-Type: application/x-www-form-urlencoded' \
					   "Referer: http://$1:8004/cernvm/Config/")

	generate_header
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --location-trusted \
	http://$1:8004/cernvm/Config/applyUpdate > $2 2>&1

	# Check that curl didn't have any error return codes, then verify that the
	# webinterface restart succeeded 
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "HTTP/1.1 403 Forbidden" $2 ; test "$?" -eq 1
		then
			RESULT=0
		fi
	fi

	return $RESULT
}


# Restart through the web interface and check there are no error messages at boot
# @param $1 - The hostname or ip address for the web interface
# @param $2 - The name of the web reboot logfile
# @param $3 - The name of the boot error logfile
web_restart()
{
	RESULT=1
	HEADER=('')
	ADDITIONAL_HEADER=('Accept: application/json' \
					   'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
					   "Referer: http://$1:8004/reboot/Reboot/" \
					   'Pragma: no-cache' \
					   'Cache-Control: no-cache')

	generate_header
	echo "${HEADER[@]}"
	curl -i -v --cookie cjar --cookie-jar cjar "${HEADER[@]}" --location-trusted \
	http://$1:8004/reboot/Reboot/rebootNow > $2 2>&1

	# Check that curl didn't have any error return codes, then verify that the
	# webinterface restart succeeded 
	if [ "$?" -eq 0 ]
	then
		if grep -q -e "HTTP/1.1 403 Forbidden" $2 ; test "$?" -eq 1 && egrep -q \
		'^\{\"message\"\:[[:space:]]*\"Rebooting[[:space:]]*now\.\"\,
		[[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"schedId\"\:
		[[:space:]]*[[:digit:]]*\}' $2 ; test "$?" -eq 0
		then
			sleep 120
			check_boot_error $1 $3
			if [ "$?" -eq 0 ]
			then
				RESULT=0
			fi
		fi
	fi

	return $RESULT
}
