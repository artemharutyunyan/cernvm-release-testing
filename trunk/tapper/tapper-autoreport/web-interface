#! /bin/bash

# =============================================================================
#
#****** test-suite/web-interface
# NAME
#   web-interface
#
# DESCRIPTION
#   This script contains several  functions that provide an interface to
#   the CernVM virtual machine web interface and return a success or failure, 
#   which can be used to generate a TAP report.
#
#   These functions can be utilized to create test cases in cernvm-testcases or 
#   can be executed individually as precondition tests
#***
#
# =============================================================================

# The base template http header used
HEADER=('')
TEMPLATE_HEADER=('')
ADDITIONAL_HEADER=('')

# List of web interface related log files
WEBINTERFACE=${LOG_FOLDER}/"web_interface.log"


#****f* web-interface/generate_template_header
# NAME
#   generate_template_header
# DESCRIPTION
#   Generate a HTTP template header for the current hypervisor which is a basis
#   to generate headers for different web-interface functions
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
# RESULT
#   TEMPLATE_HEADER - Exports the generated HTTP template header globally
# EXAMPLE
#   generate_template_header 192.168.1.125
# TODO
#   PERHAPS GENERATE DIFFERENT USER-AGENT BASED ON HOST OS
#***
generate_template_header()
{
    TEMPLATE_HEADER=(
    "Host: $1:8004" \
    'User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.17) Gecko/20110428 Fedora/3.6.17-1.fc13 Firefox/3.6.17' \
    'Accept-Language: en-us,en;q=0.5' \
    'Accept-Encoding: gzip,deflate' \
    'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7' \
    'Keep-Alive: 115' \
    'Connection: keep-alive')

    # Export the TEMPLATE globally
    export TEMPLATE_HEADER
}


#****f* web-interface/generate_header
# NAME
#   generate_header
# DESCRIPTION
#   Generate an http header using the template header and any additional 
#   header values defined
# EXAMPLE
#   generate_header
# NOTES
#   This function should only be called within the scope of a web-interface
#   function after the TEMPLATE_HEADER has been generated and the 
#   ADDITIONAL_HEADER information unique to the function has been set
#***
generate_header()
{
    HEADER=('-H' "${TEMPLATE_HEADER[0]}")

    for i in $(eval echo {1..$((${#TEMPLATE_HEADER[@]} - 1))})
    do
        HEADER=("${HEADER[@]}" '-H' "${TEMPLATE_HEADER[i]}")
    done

    for value in "${ADDITIONAL_HEADER[@]}"
    do
        HEADER=("${HEADER[@]}" '-H' "$value")
    done

    export HEADER
}


#****f* web-interface/web_check_interface
# NAME
#   web_check_interface
# DESCRIPTION
#   Verify that virtual machine has web interface support
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - The name of the logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   web_check_interface 192.168.1.125 check-interface.log
#***
web_check_interface()
{
    RESULT=1

    curl -i -v http://$1:8004/login > $2 2>&1

    # Check that curl didn't return any error codes, then verify that the
    # page is actually the CernVM web interface 
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "CernVM Software Appliance" $2 ; test "$?" -eq 0 \
        && grep -q -e '<body id="page-login">' $2 ; test "$?" -eq 0
        then
            RESULT=0
        fi
    fi

    return $RESULT
}


#****f* web-interface/web_check_login
# NAME
#   web_check_login
# DESCRIPTION
#   Verify that it is possible to login on web interface
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - The web interface username, usually admin
#   $3 - The web interface password, by default password
#   $4 - The name of the logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   web_check_login 192.168.1.125 admin password check-login.log
#***
web_check_login()
{
    RESULT=1
    HEADER=('')
    ADDITIONAL_HEADER=('Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
                       'Content-Type: application/x-www-form-urlencoded' \
                       "Referer: http://$1:8004/login")

    # Generate a template header, which is used as a template
    # for the ip address and/or OS specified
    generate_template_header $1
    generate_header
 
    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" --data "user_name=$2" --data "password=$3" \
    --data "login=Login" --location-trusted http://$1:8004/login > $4 2>&1
    
    # Check that curl didn't have any error return codes, then verify that it was
    # was possible to login on the web interface by validating that curl was 
    # redirected to the status page
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "HTTP/1.1 403 Forbidden" $4 ; test "$?" -eq 1  && egrep \
        -q '<title>CernVM[[:space:]]*Software[[:space:]]*Appliance.*</title>' \
        $4 ; test "$?" -eq 0
        then
            RESULT=0
        fi
    fi

    return $RESULT
}


#****f* web-interface/web_config_proxy
# NAME
#   web_config_proxy
# DESCRIPTION
#   Configure the proxy settings using the CernVM web interface
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - The name of the logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   web_config_proxy 192.168.1.125 config-proxy.log
# TODO
#   ADD SUPPORT TO ACTUALLY SPECIFY PROXY SETTINGS
#***
web_config_proxy()
{
    RESULT=1
    HEADER=('')
    ADDITIONAL_HEADER=('Accept: application/json' \
                       'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
                       "Referer: http://$1:8004/configure/Proxy/" \
                       'Pragma: no-cache' \
                       'Cache-Control: no-cache')

    # Generate a template header, which is used as a template
    # for the ip address and/or OS specified
    generate_template_header $1
    generate_header   
 
    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" --data "httpProxy=" \
    --data "httpPort=" --data "httpUser=" --data "httpPass=" --data "httpsProxy=" \
    --data "httpsPort=" --data "httpsUser=" --data "httpsPass=" --location-trusted \
    http://$1:8004/configure/Proxy/saveProxy > $2 2>&1
    
    # Check that curl didn't have any error return codes, then verify that the
    # proxy settings configured through the web interface succeeded 
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "HTTP/1.1 403 Forbidden" $2 ; test "$?" -eq 1
        then
            RESULT=0
        fi
    fi

    return $RESULT
}


#****f* web-interface/web_config_password
# NAME
#   web_config_password
# DESCRIPTION
#   Configure the web interface administrator password using the CernVM web interface
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - The new web interface administration password
#   $3 - The name of the logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   web_config_password 192.168.1.125 newpassword config-password.log
#***
web_config_password()
{
    RESULT=1
    HEADER=('')
    ADDITIONAL_HEADER=('Accept: application/json' \
                       'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
                       "Referer: http://$1:8004/changepassword/ChangePassword/" \
                       'Pragma: no-cache' \
                       'Cache-Control: no-cache')

    # Generate a template header, which is used as a template
    # for the ip address and/or OS specified
    generate_template_header $1
    generate_header

    # Retrieve the CSRF token
    CSRF_TOKEN=$(grep CSRF_TOKEN $IMAGE_FOLDER/cjar|sed -r 's/.*CSRF_TOKEN\s+(\S+).*/\1/')
    CSRF_TOKEN=${CSRF_TOKEN:-1}         

    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" --data "pwd1=$2" \
    --data "pwd2=$2" --data "csrf_token=$CSRF_TOKEN" --location-trusted \
    http://$1:8004/changepassword/ChangePassword/changePassword > $3 2>&1
    
    # Check that curl didn't have any error return codes, then verify that the
    # web interface admin password configured through the web interface succeeded
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "HTTP/1.1 403 Forbidden" $3 ; test "$?" -eq 1  && egrep \
        -q '\"message\"\:[[:space:]]*\"Password[[:space:]]*changed\"\,
        [[:space:]]*\"page\"\:[[:space:]]*\"changePassword\"\}' $3 ; test "$?" -eq 0
        then
            RESULT=0
        fi
    fi

    return $RESULT
}


#****f* web-interface/web_root_password
# NAME
#   web_root_password
# DESCRIPTION
#   Set the root password using the CernVM web interface
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - The new root password
#   $3 - The current web interface administration password
#   $4 - The name of the logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
# web_root_password 192.168.1.125 newpass currentpass root-password.log
#***
web_root_password()
{
    RESULT=1
    HEADER=('')
    ADDITIONAL_HEADER=('Accept: application/json' \
                       'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
                       "Referer: http://$1:8004/configure/RootPw/" \
                       'Pragma: no-cache' \
                       'Cache-Control: no-cache')

    # Generate a template header, which is used as a template
    # for the ip address and/or OS specified
    generate_template_header $1
    generate_header    

    # Login to the web interface
    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" --data "user_name=admin" --data "password=$3" \
    --data "login=Login" --location-trusted http://$1:8004/login > $4 2>&1
 
    # Visit the web page to update the CSRF_TOKEN path in the cookie 
    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" \
    --location-trusted http://$1:8004/configure/RootPw > $4 2>&1


    # Retrieve the CSRF token
    CSRF_TOKEN=$(grep CSRF_TOKEN $IMAGE_FOLDER/cjar|grep RootPw|sed -r 's/.*CSRF_TOKEN\s+(\S+).*/\1/')
    CSRF_TOKEN=${CSRF_TOKEN:-1}         

    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" --data "newpw=$2" --data \
    "newpw2=$2" --data "currentpw=$3" --data "csrf_token=$CSRF_TOKEN" --location-trusted \
    http://$1:8004/configure/RootPw/changePass >> $4 2>&1

    # Check that curl didn't have any error return codes, then verify that the
    # root password set through the web interface succeeded 
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "HTTP/1.1 403 Forbidden" $4 ; test "$?" -eq 1 && \
        egrep -q '\"message\"\:[[:space:]]*\"Completed[[:space:]]*Successfully\"' $4 ; test "$?" -eq 0''
        then    
            RESULT=0
        fi
    fi

    return $RESULT
}


#****f* web-interface/web_config_desktop
# NAME
#   web_config_desktop
# DESCRIPTION
#   Configure the CernVM image desktop settings using the CernVM web interface
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - Configure startx on boot, accepted values are on or off
#   $3 - The CernVM image desktop resolution
#   $4 - The CernVM image keyboard locale
#   $5 - The name of the logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   web_config_desktop 192.168.1.125 on 1024x768 us config-desktop.log
#***
web_config_desktop()
{
    RESULT=1
    HEADER=('')
    ADDITIONAL_HEADER=('Accept: application/json' \
                       'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
                       "Referer: http://$1:8004/cernvm/Config/" \
                       'Pragma: no-cache' \
                       'Cache-Control: no-cache')

    # Generate a template header, which is used as a template
    # for the ip address and/or OS specified
    generate_template_header $1
    generate_header   
 
    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" --data "cernvmEdition=Desktop" \
    --data "cernvmScreenRes=$3" --data "cernvmKeyboard=$4" --data "cernvmStartXDM=$2" \
    --location-trusted http://$1:8004/cernvm/Config/editionUpdate > $5 2>&1
    
    # Check that curl didn't have any error return codes, then verify that the
    # web interface admin password configured through the web interface succeeded
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "HTTP/1.1 403 Forbidden" $5 ; test "$?" -eq 1  && egrep -q \
        '^\{\"message\"\:[[:space:]]*\"Completed[[:space:]]*Successfully\"\,
        [[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"page\"\:[[:space:]]*\"\"\,
        [[:space:]]*\"schedId\"\:[[:space:]]*[[:digit:]]*\}' $5 ; test "$?" -eq 0
        then
            RESULT=0
        fi
    fi

    return $RESULT
}


#****f* web-interface/web_config_group
# NAME
#   web_config_group
# DESCRIPTION
#   Configure the CernVM image appliance group settings using the CernVM web interface
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - The appliance primary group, all capitals, only one group may be specified
#   $3 - The name of the logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   web_config_group 192.168.1.125 ALICE config-group.log
# TODO
#   ENABLE AN ARRAY / LIST OF APPLIANCE GROUPS
#***
web_config_group()
{
    RESULT=1
    GROUP_REPOSITORY=""
    HEADER=('')
    ADDITIONAL_HEADER=('Accept: application/json' \
                       'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
                       "Referer: http://$1:8004/cernvm/Config/" \
                       'Pragma: no-cache' \
                       'Cache-Control: no-cache')

    # Set the repository based on the primary group specified
    case "$2" in
    "ALICE")
      GROUP_REPOSITORY="alice"
      ;;
    "ATLAS")
      GROUP_REPOSITORY="atlas%2Batlas%2Dcondb%2Cgrid"
      ;;
    "CMS")
      GROUP_REPOSITORY="cms%2Bgrid"
      ;;
    "LHCB")
      GROUP_REPOSITORY="lhcb%2Bgrid"
      ;;
    "LCD")
      GROUP_REPOSITORY="lcd%2Bgrid%2Bsft"
      ;;
    "NA61")
      GROUP_REPOSITORY="na61%2Bsft"
      ;;
    "HONE")
      GROUP_REPOSITORY="hone%2Bsft%2Bgrid"
      ;;
    "HEPSOFT")
      GROUP_REPOSITORY="hepsoft%2Bsft"
      ;;
    "BOSS")
      GROUP_REPOSITORY="boss"
      ;;
    "GEANT4")
      GROUP_REPOSITORY="geant4%2Bgrid%2Bsft"
      ;;
    *)
      # Incorrect primary group specified, return failure
      return $RESULT
      ;;
    esac

    # Generate a template header, which is used as a template
    # for the ip address and/or OS specified
    generate_template_header $1
    generate_header    

    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" \
    --data "cernvmOrganisation=$2" --data "cernvmRepositories=$GROUP_REPOSITORY" \
    --location-trusted http://$1:8004/cernvm/Config/repositoriesUpdate > $3 2>&1
    
    # Check that curl didn't have any error return codes, then verify that the
    # web interface admin password configured through the web interface succeeded
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "HTTP/1.1 403 Forbidden" $3 ; test "$?" -eq 1  && egrep -q \
        '^\{\"message\"\:[[:space:]]*\"Completed[[:space:]]*Successfully\"\,
        [[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"page\"\:[[:space:]]*\"\"\,
        [[:space:]]*\"schedId\"\:[[:space:]]*[[:digit:]]*\}' $3 ; test "$?" -eq 0
        then
            RESULT=0
        fi
    fi

    return $RESULT
}


#****f* web-interface/web_create_user
# NAME
#   web_create_user
# DESCRIPTION
#   Create a new user using the CernVM web interface
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - The name of the new user to create
#   $3 - The password for the new user
#   $4 - The group for the new user, lowercase
#   $5 - The name of the logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   web_create_user 192.168.1.125 newuser password alice create-user.log
# TODO
#   Add documentation to developer-manual which lists available user groups,
#   as well, perhaps account for invalid user group and return error
#***
web_create_user()
{
    RESULT=1
    HEADER=('')
    ADDITIONAL_HEADER=('Accept: application/json' \
                       'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
                       "Referer: http://$1:8004/cernvm/User/" \
                       'Pragma: no-cache' \
                       'Cache-Control: no-cache')

    # Generate a template header, which is used as a template
    # for the ip address and/or OS specified
    generate_template_header $1
    generate_header

    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" --data "cernvmUser=$2" --data \
    "cernvmUserGroup=$4" --data "cernvmUserShell=%2Fbin%2Fbash" --data "newpass1=$3" \
    --data "newpass2=$3" --location-trusted http://$1:8004/cernvm/User/userUpdate \
    > $5 2>&1
    
    # Check that curl didn't have any error return codes, then verify that the
    # new user created through the web interface succeeded 
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "HTTP/1.1 403 Forbidden" $5 ; test "$?" -eq 1 && egrep -q \
        '^\{\"message\"\:[[:space:]]*\"Completed[[:space:]]*Successfully\"\,
        [[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"page\"\:[[:space:]]*\"\"\,
        [[:space:]]*\"schedId\"\:[[:space:]]*[[:digit:]]*\}' $5 ; test "$?" -eq 0
        then    
            RESULT=0
        fi
    fi

    return $RESULT
}


#****f* web-interface/web_apply_settings
# NAME
#   web_apply_settings
# DESCRIPTION
#   Apply settings configured for the CernVM image using the CernVM web interface, 
#   which then reboots the CernVM image once completed
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - The name of the logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   web_apply_settings 192.168.1.125 apply-settings.log
#***
web_apply_settings()
{
    RESULT=1
    HEADER=('')
    ADDITIONAL_HEADER=('Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
                       'Content-Type: application/x-www-form-urlencoded' \
                       "Referer: http://$1:8004/cernvm/Config/")

    # Generate a template header, which is used as a template
    # for the ip address and/or OS specified
    generate_template_header $1
    generate_header   
 
    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" --location-trusted \
    http://$1:8004/cernvm/Config/applyUpdate > $2 2>&1

    # Check that curl didn't have any error return codes, then verify that the
    # webinterface restart succeeded 
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "HTTP/1.1 403 Forbidden" $2 ; test "$?" -eq 1
        then
            RESULT=0
        fi
    fi

    return $RESULT
}


#****f* web-interface/web_restart
# NAME
#   web_restart
# DESCRIPTION
#   Restart through the web interface
# ARGUMENTS
#   $1 - The hostname or ip address for the web interface
#   $2 - The name of the web reboot logfile
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   web_restart 192.168.1.125 web-restart.log
#***
web_restart()
{
    RESULT=1
    HEADER=('')
    ADDITIONAL_HEADER=('Accept: application/json' \
                       'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
                       "Referer: http://$1:8004/reboot/Reboot/" \
                       'Pragma: no-cache' \
                       'Cache-Control: no-cache')

    # Generate a template header, which is used as a template
    # for the ip address and/or OS specified
    generate_template_header $1
    generate_header
    
    curl -i -v --cookie ${IMAGE_FOLDER}/cjar --cookie-jar ${IMAGE_FOLDER}/cjar "${HEADER[@]}" --location-trusted \
    http://$1:8004/reboot/Reboot/rebootNow > $2 2>&1

    # Check that curl didn't have any error return codes, then verify that the
    # webinterface restart succeeded 
    if [ "$?" -eq 0 ]
    then
        if grep -q -e "HTTP/1.1 403 Forbidden" $2 ; test "$?" -eq 1 && egrep -q \
        '^\{\"message\"\:[[:space:]]*\"Rebooting[[:space:]]*now\.\"\,
        [[:space:]]*\"errors\"\:[[:space:]]*\[\]\,[[:space:]]*\"schedId\"\:
        [[:space:]]*[[:digit:]]*\}' $2 ; test "$?" -eq 0
        then
            RESULT=0
        fi
    fi

    return $RESULT
}
