#! /bin/bash

# =============================================================================
#
#****** test-suite/testsuite-trace
# NAME
#   testsuite-trace
#
# DESCRIPTION
#   This script contains several trace and debugging functions that
#   provide an easy and effective way to log the execution of CernVM
#   test cases, precondition tests, and any other function which
#   enables trace and debugging support.
#
#   These functions are well suited for debugging precondition tests
#   and CernVM test cases, to enable debugging of a function simply
#   call the function using "call", to enable more verbose debugging
#   set the trace verbosity level.
#***
#
# =============================================================================


DEPTH=0
INDEX=0
export TRACE_OUTPUT=("")
export TRACE_TEMPLATE=("")
# Each tab character for indentation is 4 spaces
export TAB_SPACE='    '


#****f* testsuite-trace/generate_trace_template
# NAME
#   generate_trace_template
# DESCRIPTION
#   Generate a template for the trace log file output
# ARGUMENTS
#   $1 - The name of the function currently being traced
#   $@ - The arguments to the function that is being called
# RESULT
#   TRACE_TEMPLATE - Generates a trace template for current function
# EXAMPLE
#   generate_trace_template create_net ./network-definition.xml default
#***
generate_trace_template()
{
    local ARG_LIST=( "$@" )
    local TAB_DEPTH=""
    
    # Specify the depth to tab in the current function in trace logfile
    if [ "$DEPTH" -gt 0 ]
    then
        for i in $(eval echo {0..$((${DEPTH} - 1))})
        do
            TAB_DEPTH=${TAB_DEPTH}${TAB_SPACE}  
        done
    fi

    # Create initial function call identifier
    TRACE_TEMPLATE=("${TAB_DEPTH}->${1}")

    # Create indented STATUS and ARGUMENTS headings
    TRACE_TEMPLATE=("${TRACE_TEMPLATE[@]}" "${TAB_DEPTH}${TAB_SPACE}STATUS")
    TRACE_TEMPLATE=("${TRACE_TEMPLATE[@]}" "")
    TRACE_TEMPLATE=("${TRACE_TEMPLATE[@]}" "${TAB_DEPTH}${TAB_SPACE}ARGUMENTS")

    for i in $(eval echo {1..$((${#ARG_LIST[@]} - 1))})
    do
        TRACE_TEMPLATE=("${TRACE_TEMPLATE[@]}" "${TAB_DEPTH}${TAB_SPACE}${TAB_SPACE}${ARG_LIST[i]}")
    done

    # Create indented RETURN VALUE and RESULT headings
    TRACE_TEMPLATE=("${TRACE_TEMPLATE[@]}" "${TAB_DEPTH}${TAB_SPACE}RETURN VALUE")
    TRACE_TEMPLATE=("${TRACE_TEMPLATE[@]}" "")
    TRACE_TEMPLATE=("${TRACE_TEMPLATE[@]}" "${TAB_DEPTH}${TAB_SPACE}RESULT")
    TRACE_TEMPLATE=("${TRACE_TEMPLATE[@]}" "")

    for i in $(eval echo {0..$((${#TRACE_TEMPLATE[@]} - 1))})
    do
        echo -e ${TRACE_TEMPLATE[i]} >> logfile.log
    done
}


#****f* testsuite-trace/add_trace_template
# NAME
#   add_trace_template
# DESCRIPTION
#   Adds the contents of the global TRACE_TEMPLATE to TRACE_OUTPUT, this allows the
#   TRACE_TEMPLATE file to be dynamically re-generated if "call" is used recursively
# RESULT
#   TRACE_OUTPUT - Adds the contents of TRACE_TEMPLATE to the TRACE_OUTPUT global variable
#   INDEX        - Sets the global variable INDEX as the next index element of TRACE_OUTPUT
# EXAMPLE
#   add_trace_template
#***
add_trace_template()
{
    # Add the function name heading first 
    TRACE_OUTPUT[$INDEX]="${TRACE_TEMPLATE[0]}"

    # Add the remaining contents of trace template to output
    for i in $(eval echo {1..$((${#TRACE_TEMPLATE[@]} - 1))})
    do
        TRACE_OUTPUT=("${TRACE_OUTPUT[@]}" "${TRACE_TEMPLATE[i]}")
    done

    for i in $(eval echo {0..$((${#TRACE_OUTPUT[@]} - 1))})
    do
        echo -e ${TRACE_OUTPUT[i]} >> logfile2.log
    done

    # Update the index as the next available index element of TRACE_OUTPUT
    export INDEX="${#TRACE_OUTPUT[@]}"

    # Increment the DEPTH so that the next trace template for the current function
    # being traced is indented further
    export DEPTH=$((${DEPTH} + 1))
}


#****f* testsuite-trace/add_trace_output
# NAME
#   add_trace_output
# DESCRIPTION
#   Adds the data specified to the trace output, which will be logged to file
# ARGUMENTS
#   $@ - The data to add to the trace output
# RESULT
#   TRACE_OUTPUT - Adds the data speficied to TRACE_OUTPUT global variable
#   INDEX        - Sets the global variable index as the next index element of TRACE_OUTPUT
# EXAMPLE
#   add_trace_output "${TRACE_TEMPLATE[@]}"
#***
add_trace_output()
{
    local DATA_LIST=( "$@" )
    
    for i in $(eval echo {0..$((${#DATA_LIST[@]} - 1))})
    do
        TRACE_OUTPUT=("${TRACE_OUTPUT[@]}" "${DATA_LIST[i]}")
    done

    for i in $(eval echo {0..$((${#TRACE_OUTPUT[@]} - 1))})
    do
        echo -e ${TRACE_OUTPUT[i]} >> logfile2.log
    done

    # Update the index as the next available index element of TRACE_OUTPUT
    export INDEX="${#TRACE_OUTPUT[@]}"
}
