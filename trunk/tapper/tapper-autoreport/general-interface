#! /bin/bash

# =============================================================================
#
#****** test-suite/general-interface
# NAME
#   general-interface
#
# DESCRIPTION
#   This script contains general interface functions that interface with 
#   the host system and provide generic functionality such as checking the
#   host architecture, getting the host operating system, checking if a file
#   exists, etc.
#
#   These functions can be utilized to create precondition tests and test 
#   cases which require generic functionality that is not part of the
#   virt or web interface functions
#***
#
# =============================================================================


#****f* general-interface/file_exists
# NAME
#   file_exists
# DESCRIPTION
#   Simple function that checks if a file/folder exists
# ARGUMENTS
#   $1 - The location and name of the file
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   file_exists ./template.xml
#***
file_exists()
{
	RESULT=1
	if [ -e "$1" ]
	then
		RESULT=0
	fi

	return $RESULT
}


#****f* general-interface/extract_file
# NAME
#   extract_file
# DESCRIPTION
#   Extracts a file based on extension within the directory it is located in
# ARGUMENTS
#   $1 - The location and name of the file
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   extract_file /root/file.tar.gz
#***
extract_file()
{
	RESULT=1
	
	# Set the root directory to extract the file within
	FOLDER=$(echo $1 | sed -E "s/^(\/.*)+\/.*\..*/\\1/")
	
	# Determine the extension of the file
	EXTENSION=$(echo $1 | sed -E "s/^.*\.(.*\..*)/\\1/")
	
	# Extract the file based on extension
	case "${EXTENSION}" in
	"tar.gz")
	  tar -xvzf $1 -C ${FOLDER} > /dev/null 2>&1
	  ;;
	*.gz)
	  # cd to folder and extract file
	  FILE=$(echo $1 | sed -E "s/^\/.*\/(.*\.gz)/\\1/")
	  cd ${FOLDER} ; gunzip -vd ${FILE} > /dev/null 2>&1
	  ;;
	*)
	  return $RESULT
	  ;;
	esac

	RESULT="$?"
	return $RESULT
}


#****f* general-interface/filename_from_url
# NAME
#   filename_from_url
# DESCRIPTION
#   Function that returns the name of a file to be downloaded given a url
# ARGUMENTS
#   $1 - The download url of the file
# RETURN VALUE
#   filename - The name of a file to be downloaded
# EXAMPLE
#   FILE_NAME=$(filename_from_url http://someurl/file.tar.gz)
#***
filename_from_url()
{
	# Get the filename from location
	FILENAME=$(echo $1 | sed -E "s/^.*\/(.*)/\\1/")
	
	echo ${FILENAME}
}


#****f* general-interface/filename_from_header
# NAME
#   filename_from_header
# DESCRIPTION
#   Function that returns the name of a file to be downloaded given a url by
#   looking at the "Location:" specified in HTTP header
# ARGUMENTS
#   $1 - The download url of the file
# RETURN VALUE
#   filename - The name of a file to be downloaded
# EXAMPLE
#   FILE_NAME=$(filename_from_header http://someurl/file.tar.gz)
#***
filename_from_header()
{
	# Get the HTTP header with actual location of the file
	# Filter the ^M characters out of the stream (this caused many headaches)
	LOCATION=$(curl -i $1 | sed 's/'"$(printf '\015')"'$//g' | egrep -E "^Location:[[:space:]]*")

	# Get the filename from location
	FILENAME=$(echo ${LOCATION} | sed -E "s/^.*\/(.*)/\\1/")
	
	echo ${FILENAME}
}


#****f* general-interface/find_file
# NAME
#   find_file
# DESCRIPTION
#   Function that finds a file and returns the name and path of a file given the 
#   root directory and the extension of the file
# ARGUMENTS
#   $1 - The root directory to search for the file
#   $2 - The extension of the file to look for
# RETURN VALUE
#   filelocation - The name and path of a file
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   FILE_LOCATION=$(find_file /usr/share/images vmdk)
#***
find_file()
{
	RESULT=1
	
	# Search for the file in the root directory based on extension
	FILE_LOCATION=$(find $1/* -name "*.$2")
	RESULT="$?"
	echo ${FILE_LOCATION}
	
	return $RESULT
}


#****f* general-interface/get_hash
# NAME
#   get_hash
# DESCRIPTION
#   Simple function that returns the hash of a file
# ARGUMENTS
#   $1 - The location and name of the file
#   $2 - The type of hash, currently supported hashes are: 
#        crc32, md5, sha, sha1, sha224, sha256, sha384, sha512
# RETURN VALUE
#   hash - The hash of the file
# EXAMPLE
#   HASH=$(get_hash /root/file.tar.gz md5)
#***
get_hash()
{
	HASH=""
		
		# Get the hash of the file
		case "$2" in
		"crc32")
		  HASH=$(cksum $1 | awk '{print $1}')
		  ;;
		"md5")
		  HASH=$(md5sum $1 | awk '{print $1}')
		  ;;
		"sha")
		  HASH=$(shasum $1 | awk '{print $1}')
		  ;;
		"sha1")
		  HASH=$(sha1sum $1 | awk '{print $1}')
		  ;;
		"sha224")
		  HASH=$(sha224sum $1 | awk '{print $1}')
		  ;;
		"sha256")
		  HASH=$(sha256sum $1 | awk '{print $1}')
		  ;;
		"sha384")
		  HASH=$(sha384sum $1 | awk '{print $1}')
		  ;;
		"sha512")
		  HASH=$(sha512sum $1 | awk '{print $1}')
		  ;;
		esac

	echo ${HASH}
}


#****f* general-interface/get_net_name
# NAME
#   get_net_name
# DESCRIPTION
#   Simple function that returns the network name from xml network definition file
# ARGUMENTS
#   $1 - The network XML definition file
# RETURN VALUE
#   networkname - The network name defined in the xml network definition file
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   NET_NAME=$(get_net_name ./network-definition.xml)
#***
get_net_name()
{
	RESULT=1
	
	# Network name not specified, set network name as default name in template
	NET_NAME=$(egrep -E "^[[:space:]]*<name>.+</name>" $1 | \
			   sed -E "s|.*<name>(.*)</name>.*|\\1|")

	RESULT=$?
	echo ${NET_NAME}
	return $RESULT	
}


#****f* general-interface/get_ip_address
# NAME
#   get_ip_address
# DESCRIPTION
#   Simple function that returns the ip address from the xml network definition file
# ARGUMENTS
#   $1 - The network XML definition file
# RETURN VALUE
#   ipaddress - The ip address defined in the xml network definition file
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   IP_ADDRESS=$(get_ip_address ./network-definition.xml)
#***
get_ip_address()
{
	RESULT=1

	# IP address not specified, set the ip address as default in template
	IP_ADDRESS=$(egrep -E "^[[:space:]]*<range[[:space:]]*start='(.*)'" $1 | \
				 sed -E "s|.*start='([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})'.*|\\1|")
	
	RESULT=$?
	echo ${IP_ADDRESS}
	return $RESULT			
}


#****f* general-interface/ssh_autologin
# NAME
#   ssh_autologin
# DESCRIPTION
#   A function which configures automatic SSH login using keys instead of passwords
# ARGUMENTS
#   $1 - The IP address of the machine to login via ssh
#   $2 - The username to login with
#   $3 - The password to login with
# RESULT
#   exitstatus - Sets $? as a zero for success, otherwise sets an error code
# EXAMPLE
#   ssh_autologin 192.168.1.125 root password
#***
ssh_autologin()
{
	# Use a here-doc to script expect to automate password authentication
	/usr/bin/expect <<EOF
	match_max 100000
	set prompt "*?\$"

	spawn ssh-copy-id $2@$1
	# Look for connection prompt
	expect {
		"\(yes\/no)\?" {
		send_user "saying yes to connect\r"
		send "yes\r"
		exp_continue
		}
		"*?assword:*" {
		# Login
		send_user "Logging in\r"
		send "$3\r"
		exp_continue	
		}
	}
EOF

	return $?
}
