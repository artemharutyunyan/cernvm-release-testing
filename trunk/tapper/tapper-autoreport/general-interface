#! /bin/bash

# =============================================================================
#
# general-interface
# -----------------
#
# This script contains general interface functions that interface with 
# the host system and provide generic functionality such as checking the
# host architecture, getting the host operating system, checking if a file
# exists, etc.
#
# These functions can be utilized to create precondition tests and test 
# cases which require generic functionality that is not part of the
# virt or web interface functions
#
# =============================================================================

# Simple function that checks if a file exists
# @param $1 - The location and name of the file
file_exists()
{
	RESULT=1
	if [ -e "$1" ]
	then
		RESULT=0
	fi

	return $RESULT
}

# Extracts a file based on extension and returns location of extracted folder
# @param $1 - The location and name of the file
extract_file()
{
	RESULT=1
	FOLDER=""

	# Determine the extension of the file
	EXTENSION=$(echo $1 | sed -E "s/^.*\.(.*\..*)/\\1/")
	
	# Extract the file based on extension
	case "${EXTENSION}" in
	"tar.gz")
	  FOLDER=$(echo $1 | sed -E "s/^(.*)\.tar\.gz/\\1/")
	  mkdir -p ${FOLDER}
	  tar -xvzf ${FILENAME} -C ${FOLDER} > /dev/null 2>&1
	  ;;
	"*.gz")
	  FOLDER=$(echo $1 | sed -E "s/^(.*)\.gz/\\1/")
	  mkdir -p ${FOLDER}
	  mv -f $1 ${FOLDER}/
	  cd ${FOLDER}/ ; gunzip -vd ${FILENAME} > /dev/null 2>&1
	  ;;
	*)
	  return $RESULT
	  ;;
	esac

	RESULT="$?"
	echo ${FOLDER}
	return $RESULT
}

# Function that returns the name of a file to be downloaded given a url
# @param $1 - The download url of the file
filename_from_url()
{
	# Get the http header with actual location of the file
	# Filter the ^M characters out of the stream (this caused many headaches)
	LOCATION=$(curl -i $1 | sed 's/'"$(printf '\015')"'$//g' | egrep -E "^Location:[[:space:]]*")

	# Get the filename from location
	FILENAME=$(echo ${LOCATION} | sed -E "s/^.*\/(.*)/\\1/")
	
	echo ${FILENAME}
}

# Simple function that returns the hash of a file
# @param $1 - The location and name of the file
# @param $2 - The type of hash, currently supported hashes are: 
#			  crc32, md5, sha, sha1, sha224, sha256, sha384, sha512 
get_hash()
{
	HASH=""
		
		# Get the hash of the file
		case "$2" in
		"crc32")
		  HASH=$(cksum $1 | awk '{print $1}')
		  ;;
		"md5")
		  HASH=$(md5sum $1 | awk '{print $1}')
		  ;;
		"sha")
		  HASH=$(shasum $1 | awk '{print $1}')
		  ;;
		"sha1")
		  HASH=$(sha1sum $1 | awk '{print $1}')
		  ;;
		"sha224")
		  HASH=$(sha224sum $1 | awk '{print $1}')
		  ;;
		"sha256")
		  HASH=$(sha256sum $1 | awk '{print $1}')
		  ;;
		"sha384")
		  HASH=$(sha384sum $1 | awk '{print $1}')
		  ;;
		"sha512")
		  HASH=$(sha512sum $1 | awk '{print $1}')
		  ;;
		esac

	echo ${HASH}
}
