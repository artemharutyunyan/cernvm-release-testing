#! /bin/bash

# =============================================================================
#
# cernvm-testcases
# -----------------
#
# This script contains each of the CernVM Release Testing
# test cases and provides a simple interface to execute each test
# and returns either a success or failure, (0 or 1) which can be 
# used to generate a TAP report.
#
# More complex test cases can be created by combining other test cases
# as prerequisites for the test case
#
# TODO: MAKE MANY OF THE TEST CASES HAVE OTHER TEST CASES AS
# 		PREREQUISITES AND THEN IF THEY FAIL REPORT THAT THE TEST CASE
#		FAILED BECAUSE A PREREQUISITE FAILED, AND WHY THAT PREREQUISITE
#		FAILED. THIS IS MUCH BETTER THAN HAVING A TEST CASE FAIL DUE
# 		TO ANOTHER DEPENDENCY AND MAKES THE TEST CASES ORDER-INDEPENDENT
#		IE. FOR check_time(), CALL check_ssh() AND VERIFY THAT SSH IS
#		FIRST POSSIBLE, THIS GIVES MORE EXPLANATION TO FAILURES RATHER
#		THAN A FAILURE FOR THE NTPD TIME BEING INCORRECT, WHEN IN REALITY
#		check_time() COULDN'T SSH TO THE MACHINE
#		*** THIS IS ESSENTIALLY TAPPER'S YAML STRUCTURE ANYWAYS...
#
# =============================================================================

# CernVM Test Case - Download and extract the CernVM image
# @param $1 - The CernVM image download url
# @param $2 - The CernVM image hash url
# @param $3 - The name of the log file
download_extract()
{
	RESULT=1
	# This is specific to the cernvm website which doesn't give the actual location
	FILENAME=$(filename_from_url $1)
	FOLDER=""

	# Precondition - verify file has not already been downloaded
	if verify_file_exists ${FILENAME} ; test "$?" -eq 1
	then
		wget --verbose $1 > $3 2>&1

		# If download succeeded extract file		
		if test "$?" -eq 0 && verify_file_exists ${FILENAME} ; test "$?" -eq 0
		then
			FOLDER=$(extract_file ${FILENAME})

			# Verify extraction succeeded and folder exists
			if test "$?" -eq 0 && verify_file_exists ${FOLDER} ; test "$?" -eq 0
			then
				RESULT=0
			fi
		fi			
	fi

	return $RESULT
}

# CernVM Test Case - Check login via ssh
# @param $1 - The username to login with
# @param $2 - The IP address of the machine to login via ssh
check_ssh()
{
	ssh -q -o "BatchMode=yes" $1@$2 "echo 2>&1"

	return $?
}


# CernVM Test Case - Check for error messages at boot
# @param $1 - The IP address of the machine to login via ssh
# @param $2 - The name of the boot errors log file
check_boot_error()
{
	RESULT=0
	BOOT_TESTS=("ssh -q -o \"BatchMode=yes\" root@$1 dmesg | egrep \"error|warning|fail\" > $2" 
"ssh -q -o \"BatchMode=yes\" root@$1 cat /var/log/boot.log | egrep \"error|warning|fail\" >> $2" 
"ssh -q -o \"BatchMode=yes\" root@$1 cat /var/log/messages | egrep \"error|warning|fail\" >> $2" 
"ssh -q -o \"BatchMode=yes\" root@$1 cat /var/log/cernvm-update.log | egrep \"error|warning|fail\" >> $2")

	# Precondition for ssh support as root for boot error tests
	if check_ssh root $1 ; test "$?" -eq 0 ; then
	for test in "${BOOT_TESTS[@]}"
	do
		eval $test
		    # If any of the tests has boot error, set result as failure and continue
			# logging the rest of the boot messages that contain boot errors
		    if [ "$?" -eq 0 ]
		    then
		            RESULT=1
		    fi
	done
	else
		echo "FAIL - Precondition for ssh support as root for boot error tests"
		RESULT=1
	fi
	
	return $RESULT
}

# CernVM Test Case - Check for correct time / running ntpd
# @param $1 - The IP address of the machine to login via ssh
check_time()
{
	ssh -q -o "BatchMode=yes" root@$1 ps -eaf | grep -q ntpd

	return $?
}
