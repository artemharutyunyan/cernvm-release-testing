#! /bin/bash

# =============================================================================
#
# cernvm-preconditions
# --------------------
#
# This script contains each of the CernVM Release Testing precondition
# tests, which are required preconditions that must pass for the results 
# of test cases to be accurate. The precondition tests have a simple
# interface to execute each test and each test returns either a success or 
# failure, (0 or 1)
#
# More complex precondition tests can be created by combining other 
# precondition tests as prerequisites for a precondition test
#
# =============================================================================

# GENERIC PRECONDITION TESTS
# --------------------------

# Precondition Test - Verify that a file exists
# @param $1 - The location and name of the file
verify_file_exists()
{
	file_exists $1
	
	return $?
}

# Precondition Test - Verify the hash of a file
# @param $1 - The location and name of the file
verify_hash()
{
}



# VIRTUAL MACHINE RELATED PRECONDITION TESTS
# ------------------------------------------

# Precondition Test - Verify that virtual machine NAT network is active and 
#					  set to autostart
# @param $1 - The virtual machine network name
verify_vm_net()
{
	RESULT=1

	# Verify that the network is set as active
	if vm_net_active $1 ; test "$?" -eq 0
	then
		# Verify that the network set as autostart
		if vm_net_autostart $1 ; test "$?" -eq 0
		then
			RESULT=0
		fi
	fi

	return $RESULT
}

# Precondition Test - Verify that the XML definition file provided is valid
# @param $1 - The virtual machine XML definition file
validate_def_xml()
{
	RESULT=1

	# Precondition - verify file exists
	if file_exists $1 ; test "$?" -eq 0
	then
		# Verify xml file is valid
		if xmllint --noout $1 ; test "$?" -eq 0
		then
			RESULT=0
		fi
	fi

	return $RESULT
}	
		
# Precondition Test - Verify that the mandatory configuration settings for the virtual
#					  machine XML definition file have been provided and are valid
# @param $1 - The virtual machine XML definition file
validate_def_settings()
{
	RESULT=1

	# Precondition - verify file exists
	# Precondition - verify xml file is valid
	if file_exists $1 ; test "$?" -eq 0 \
	&& validate_def_xml $1 ; test "$?" -eq 0
	then
		# Check that mandatory settings are correct
		# Verify domain type from xml file, return failure if not valid type
		DOMAIN_TYPE=$(egrep -E "^<domain[[:space:]]*type='([a-zA-Z]+)'" $1 | sed -E "s/.*type='([^']+)'.*/\\1/")
		case "$DOMAIN_TYPE" in
		"kvm")
		  ;;
		"vbox")
		  ;;
		"vmware")
		  ;;
		*)
		  return $RESULT
		  ;;
		esac

		# Verify that the name is set
		if egrep -q -E "^[[:space:]]*<name>.+</name>" $1 ; test "$?" -ne 0
		then
			# No virtual machine name set
			return $RESULT
		fi

		# Verify that the memory is set
		if egrep -q -E "^[[:space:]]*<memory>[0-9]+</memory>" $1 ; test "$?" -ne 0
		then
			# No memory set
			return $RESULT
		fi

		# Verify that the number of virtual cpus is set
		if egrep -q -E "^[[:space:]]*<vcpu>[0-9]{1}</vcpu>" $1 ; test "$?" -ne 0
		then
			# No vcpus set
			return $RESULT
		fi

		# Verify that the virtual machine image file is set and exists
		IMAGE_FILE=$(egrep -E "^[[:space:]]*<source file='(.*)'" $1 | sed -E "s/.*'([^']+)'.*/\\1/")
		if file_exists $IMAGE_FILE ; test "$?" -ne 0
		then
			# Image file not set, or doesn't exist
			return $RESULT
		fi
	
		# All mandatory configuration settings for the virtual machine XML 
		# definition file have been provided and are valid
		RESULT=0
	fi

	return $RESULT
}

# Precondition Test - Verify that the hypervisor for the current virtual machine
#					  tested is accessible, set the hypervisor URI as a global variable
# @param $1 - The virtual machine XML definition file
verify_hypervisor()
{
	RESULT=1
	URI="test:///default"

	# Precondition - Validate the mandatory virtual machine settings for the hypervisor
	if validate_def_settings $1 ; test "$?" -eq 0
	then
		# Set the virsh URI for the virtual machine hypervisor
		DOMAIN_TYPE=$(egrep -E "^<domain[[:space:]]*type='([a-zA-Z]+)'" $1 | sed -E "s/.*type='([^']+)'.*/\\1/")
		case "$DOMAIN_TYPE" in
		"kvm")
		  URI="qemu:///system"
		  ;;
		"vbox")
		  URI="vbox:///session"
		  ;;
		"vmware")
		  URI="vmwarews:///session"
		  ;;
		esac
	fi

	# If it is possible to connect to the hypervisor through virsh export URI
	if connect_virsh $URI ; test "$?" -eq 0
	then
		export "$URI"
		RESULT=0
	fi

	return $RESULT
}

# 	TODO CLEAN UP THE FOLLOWING PRECONDITON TESTS AND PLACE THEM IN THIS FILE
#	Precondition Test 2 - Verify that virtual machine domain has been created 
#						  from an xml file
#
#	Precondition Test 3 - Verify that virtual machine can be started
#
#	Precondition Test 4 - Verify that virtual machine has been stopped
#
#	Precondition Test 5 - Verify that the virtual has console support
#
#	Precondition Test 6 - Verify that virtual machine has web interface support
#
#	Precondition Test 7 - Verify that it is possible to login on web interface
