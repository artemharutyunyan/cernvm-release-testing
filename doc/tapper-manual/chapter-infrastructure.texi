@node Technical Infrastructure, Test Protocol, Synopsis, Top

@chapter Technical Infrastructure

See also the ``Getting Started Guide'' for more complete step-by-step
instructions how to install the infrastructure from scratch up to a
first example test run.

@menu
* Adding a new host into automation::  
@end menu

@node Adding a new host into automation
@section Adding a new host into automation

This chapter describes what you need to do in order to get a new
machine into the Tapper test scheduling rotation.

@menu
* Make machine remote hard resetable::  
* Make machine PXE boot aware::  
* Configure TFTP on central MCP machine::  
* Make the hosts known in the TestrunDB::  
* Optionally enable temare to generate tests for this host::  
@end menu

@node Make machine remote hard resetable, Make machine PXE boot aware, Adding a new host into automation, Adding a new host into automation
@subsection Make machine remote hard resetable

Connect the machine physically to some facility to programmatically
switch it completely off.

This can be the Reset cable wires connected to a dedicated reset box
which can be programmed usually with an external tool. It can also be
a TCP/IP controllable Power Control. 

As an example Tapper comes with a plugin for the ``Infratec PM211
MIP'' ethernet controllable multi socket outlet. To use it write this
in the configuration file:

@verbatim
reset_plugin: PM211MIP
reset_plugin_options:
  ip: 192.168.1.39
  user: admin
  passwd: secret
  outletnr:
    johnconnor: 1
    sarahconnor: 2
@end verbatim

This configures to use the PM211MIP plugin for reset and gives it the
configuration that the host ``johnconnor'' is connected on port 0 and
the host ``sarahconnor'' on port 1, together with IP address, username
and password of the multi-socket outlet.

If you have other hardware then write your own reset plugin
@code{FooBar} in a Perl module
@code{Tapper::MCP::Net::Reset::FooBar}. Look into the code of
@code{Tapper::MCP::Net::Reset::PM211MIP} to get inspiration.

@node Make machine PXE boot aware, Configure TFTP on central MCP machine, Make machine remote hard resetable, Adding a new host into automation
@subsection Make machine PXE boot aware

@itemize

@item Set booting order in BIOS to network first

@item Configure DHCP for each connected machine

The following example configures two hosts @samp{sarahconnor} and
@samp{johnconnor} to use the respective files
@samp{/tftpboot/sarahconnor.lst} and @samp{/tftpboot/johnconnor.lst}
as grub config.

@verbatim
# example dhcp config with invalid ethernet addresses
subnet 192.168.1.0 netmask 255.255.255.0 {
group
{
 filename '/tftpboot/pxegrub';
 # offer the host the here given name as host name
 option host-name = host-decl-name;
 option dhcp-parameter-request-list = concat(option dhcp-parameter-request-list,96);
 host sarahconnor
 {
   hardware ethernet 00:09:11:11:11:11;
   fixed-address 192.168.1.2;
   option configfile "/tftpboot/sarahconnor.lst";
 }
 host johnconnor
 {
  hardware ethernet 00:09:22:22:22:22;
  fixed-address 192.168.1.3;
  option configfile "/tftpboot/johnconnor.lst";
 }
}
@end verbatim

These grub config files are later dynamically overwritten for each
boot by your application server's ``Master Control Program'' (MCP).

The example above assumes the DHCP also running on the central Master
Control Program (MCP) server. To use a DHCP server running on another
host configure it with some grub/tftp redirection chains to in the end
lead to the same files @samp{/tftpboot/sarahconnor.lst} and
@samp{/tftpboot/johnconnor.lst} loaded from the MCP server.

@item Force DHCP server to reread its configuration

@verbatim
 $ kill -HUP $pid_of_dhcpd
@end verbatim

@end itemize

@node Configure TFTP on central MCP machine, Make the hosts known in the TestrunDB, Make machine PXE boot aware, Adding a new host into automation
@subsection Configure TFTP on central MCP machine

The MCP server is also acting as a TFTP server, so it has to be
configured as such:

@itemize

@item Install a TFTP server

@verbatim
 $ sudo apt-get install inetutils-inetd
 $ sudo apt-get install atftpd
 $ sudo chmod 777 /var/lib/tftpboot/
 $ sudo ln -s /var/lib/tftpboot /tftpboot
@end verbatim

@item Create symlinks to point TFTP dir into Tapper working dir

The TFTP daemon only serves files from @samp{/tftpboot}, as seen above
in the DHCP config. To supply files from the Tapper working dir make
the @samp{/tftpboot} a symlink to the Tapper working dir.

@verbatim
 $ ln -s /data/tapper/live/configs/tftpboot /tftpboot
@end verbatim

When Tapper creates tftp files it works with absolute path
names. Because the TFTP daemon interprets all absolute pathnames
relative to its root dir we supply a @samp{tftpboot} symlink inside
the tftp root (which is also our Tapper working dir), so we can use
the same absolute path name in both contexts (Tapper and TFTP):

@verbatim
 $ ln -s /data/tapper/live/configs/tftpboot \
         /data/tapper/live/configs/tftpboot/tftpboot
@end verbatim

@end itemize

@node Make the hosts known in the TestrunDB, Optionally enable temare to generate tests for this host, Configure TFTP on central MCP machine, Adding a new host into automation
@subsection Make the hosts known in the TestrunDB

@verbatim
 $ tapper-testrun newhost --name=sarahconnor --active=1
 $ tapper-testrun newhost --name=johnconnor  --active=1
@end verbatim

This makes the hosts generally available (active) for scheduling
testruns by machine name. For scheduling hosts by more detailed
machine features (cpu, memory, family, etc.)  you need to add
according key/value pairs in the @samp{HostFeature} table.

@node Optionally enable temare to generate tests for this host,  , Make the hosts known in the TestrunDB, Adding a new host into automation
@subsection Optionally: enable @samp{temare} to generate tests for this host

@samp{Temare} is an utility that generates preconditions according to
a test matrix of host/guest virtualization scenarios (but not yet
shipped publicly).

For generating preconditions for a host, you can register the host in
@samp{temare}.

If you want tests scheduled for the new machine then follow these
steps:

@itemize

@item Login as root on MCP server

@item Set the @code{PYTHONPATH} to include the @emph{temare} src directory

@verbatim
export PYTHONPATH=$PYTHONPATH:/opt/tapper/python/temare/src
@end verbatim

@item Add the host to temare hostlist

@verbatim
 $ /opt/tapper/python/temare/temare hostadd $hostname \
                                             $memory \
                                             $cores \
                                             $bitness
@end verbatim

@item Add the Tapper ssh key to your image.

@verbatim
cat /home/tapper/.ssh/id_dsa.pub >> /root/.ssh/authorized_keys
@end verbatim


(FIXME) Actually this does not belong into the host preparation but
into a separate image preparation chapter which does not yet exist.

@end itemize

@cindex Index entry for First Chapter
