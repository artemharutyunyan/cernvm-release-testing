@node Preconditions, Command line interface, Test Suite Wrappers, Top

@chapter Preconditions

The central thing that is needed before a test is run is a so called
@dfn{precondition}. Creating those preconditions is the main task
needed to do when using the automation framework.

Most of the @emph{preconditions} describe packages that need to be
installed. Other preconditions describe how subdirs should be copied
or scripts be executed.

A @emph{precondition} can depend on other preconditions, leading to a
tree of preconditions that will be installed from the leaves to the
top.

@section SYNOPSIS

@itemize

@item Create a (maybe temporary) file

@item Define conditions for a testrun: the @dfn{preconditions}

@item Put the precondition into the database, maybe referring to other preconditions

@item Create a testrun in the database, referring to the precondition

@item Wait until the testrun is executed and results are reported

@end itemize

@section Layers of preconditions

There are ``normal preconditions'' and ``macro preconditions''.

@subsection Normal preconditions

We store preconditions in the database and assign @emph{testruns} to
them (also in the database).

Usually the preconditions were developed in a (temporary) file and
then entered into the database with a tool. After that the temporary
file can be deleted. Note that such a precondition file can contain
multiple precondition as long as they are formated as valid YAML.

@emph{Preconditions} can be kept in files to re-use them when creating
testruns but that's not needed for archiving purposes, only for
creation purposes.

Please note: @strong{Normal preconditions are usually not what you
want.} It's the low level mechanism. Its advantage is in reusing the
preconditions by referring to IDs and creating trees of
preconditions. This reuse is usually too complex. @strong{What you
typically want are Macro Preconditions}.

@subsection Macro preconditions

There is another mechanism on top of normal preconditions: @dfn{Macro
Preconditions}. These allow to bundle @strong{multiple} preconditions
at once into a common use-case.

A @emph{macro precondition} is evaluated when the testrun is added via
the cmdline utils (or the web app, both use the same underlying
layer). The result are ``normal preconditions'' which are inserted
into the DB everytime together with the testrun, so there is no reuse
of preconditions and preconditions are always a list, no tree. Anyhow,
they are much easier to handle.

@emph{Macro preconditions} are template files which should be archived
in the precondition repository, as only the finally resulting
preconditions are stored in the database.

@section Precondition repository

Macro preconditions can be stored in

@verbatim
/data/tapper/live/repository/macropreconditions/
@end verbatim

@section Overview: Precondition Types

There are two variants of preconditions: @emph{Action preconditions}
and @emph{Highlevel preconditions}. Action preconditions describe
single actions, like ``copy a file'' or ``execute a
program''. Highlevel preconditions can contain other (action)
preconditions and are used for instance for virtualization install
scenarios where hosts and guests are described.

@strong{Please note the wording}: A precondition is the particular
YAML block with all the details (think of an object instance). Such a
block is of a ``precondition type'' which defines its allowed
structure (think of a class).

@subsection Overview: Action precondition types

The following @dfn{action} precondition types are allowed:

@table @b

@item package

A package (kernel, library, etc.), of type @emph{.tar}, @emph{.tar.gz} or @emph{.tar.bz2}

@item image

A complete OS image of type @emph{.iso}, @emph{.tar.gz}, @emph{.tgz},
@emph{.tar}, @emph{.tar.bz2}

@item prc

Create a config for the @dfn{PRC} module of the automation layer.

@item copyfile

One file that can just be copied/rsync'd

@item installer_stop

Don't reboot machine after system installer finished

@item grub

Overwrite automatically generated grub config with one provided by the tester

@item fstab

Append a line to /etc/fstab

@item repository

Fetch data from a git, hg or svn repository

@item exec

Execute a script during installation phase

@item reboot

Requests a reboot test and states how often to reboot.

@end table


@subsection Overview: Highlevel precondition types

Currently only the following @dfn{high level} precondition type is
allowed:

@table @b

@item virt

Generic description for Xen or KVM

@end table


@emph{High level preconditions} both define stuff and can also contain
other preconditions.

They are handled with some effort to @emph{Do The Right Thing}, i.e.,
a defined root image in the high level precondition is always
installed first. All other preconditions are installed in the order
defined by its tree structure (depth-first).

@section Details: Precondition Types

We describe preconditions in YAML files (@url{http://www.yaml.org/}).

All preconditions have at least a key

@example
@verbatim
precondition_type: TYPE
@end verbatim
@end example

and optionally

@example
@verbatim
name: VERBOSE DESCRIPTION
shortname: SHORT DESCRIPTION
@end verbatim
@end example

then the remaining keys depend on the TYPE.

@subsection installer_stop

stop run after system installer

@example
@verbatim
---
precondition_type: installer_stop
@end verbatim
@end example

@subsection grub

overwrite automatically generated grub config

@example
@verbatim
---
precondition_type: grub
config: |
  title Linux
    root $grubroot
    kernel /boot/vmlinuz root=$root"
@end verbatim
@end example

@itemize

@item Note: multiple lines in the grub file have to be given as one
line separated by ``\n'' (literally a backslash and the letter n) in
YAML

@item the variables $grubroot and $root are substituted with grub and /dev/* notation of the root partition respectively

@item $root substitution uses the notation of the installer kernel. This may cause issues when the installer detects /dev/sd? and the kernel under test detects /dev/hd? or vice versa

@item since grub always expects parentheses around the device, they are part of the substitution string for $grubroot

@item note the syntax, to get multiline strings in YAML you need to
start them with |, a newline and some indentation

@end itemize

@subsection package

@example
@verbatim
---
precondition_type: package
filename: /data/tapper/live/repository/packages/linux/linux-2.6.27.7.tar.bz2
@end verbatim
@end example

@itemize

@item path names can be absolut or relative to
 /data/tapper/development/repository/packages/

@item supported packages types are rpm, deb, tar, tar.gz and tar.bz2

@item package type is detected automatically

@item absolute path: usually /data/tapper/...

@item relative path: relative to /data/tapper/(live|development)/

@end itemize

@subsection copyfile

a file that just needs to be scp or copied:

@example
@verbatim
---
precondition_type: copyfile
protocol: nfs
source: osko:/export/image_files/official_testing/README
dest: /usr/local/share/tapper/
@end verbatim
@end example

@itemize

@item supported protocols are ``scp'', ``nfs'' and ``local''

@item the part before the first colon in the unique name is used as server name

@item the server name part is ignored for local

@item if dest ends in a slash, the file is copied with its basename preserved into the denoted directory

@item whether the ``dest'' is interpreted as a directory or a file is decided by the underlying ``scp'' or ``cp'' semantics, i.e., it depends on whether a directory already exists.

@end itemize

@subsection fstab

a line to add to /etc/fstab, e.g., to enable mounts once the system boots

@example
@verbatim
---
precondition_type: fstab
line: "165.204.85.14:/vol/osrc_vol0 /home nfs auto,defaults 0 0"
@end verbatim
@end example

@subsection image

usually the root image that is unpacked to a partition
(this is in contrast to a guest file that's just there)

@example
@verbatim
---
precondition_type: image
mount: /
partition: testing
image: /data/tapper/live/repository/images/rhel-5.2-rc2-32bit.tgz
@end verbatim
@end example

@itemize

@item partition and mount are required, all other options are optional

@item mount points are interpreted as seen inside the future installed system

@item if no image is given, the already installed one is reused, i.e., only the mountpoint is mounted; make sure this is possible or your test will fail!

@item can be either an iso file which is copied with dd or a tar, tar.gz or
 tar.bz2 package which is unpacked into the partition

@item partitions are formated ext3 (only when image is given)
and mounted to mount afterwards

(this is why image exists at all, copyfile does not provide this)

@item ``image'': absolute or relative path (relative to /data/tapper/live/repository/images/)

If not given, then it re-uses the partition without formatting/unpacking it.

@item partition: Can be /dev/XXX or LABEL or UUID.

@end itemize

@subsection repository

@example
@verbatim
---
precondition_type: repository
type: git
url: git://git.kernel.org/pub/scm/linux/kernel/git/avi/kvm.git
target: kvm
revision: c192a1e274b71daea4e6dd327d8a33e8539ed937
@end verbatim
@end example

@itemize

@item git and hg are supported

@item type and url are mandatory, target and revision are optional

@item target denotes the directory where the source is placed in, 
the leading slash can be left out (i.e., paths can be given relative
to root directory @samp{/}).

@end itemize

@subsection type: prc

Is typically contained implicitely with the abstract precondition
@emph{virt}. But can also be defined explicitely, e.g., for kernel
tests.

Creates config for PRC. This config controls what is to be run and
started when the machine boots.

@example
@verbatim
precondition_type: prc
config:
     runtime: 30
     test_program: /bin/uname_tap.sh
     timeout_after_testprogram: 90
     guests:
      - svm:  /xen/images/..../foo.svm
      - svm:  /xen/images/..../bar.svm
      - exec: /xen/images/..../start_a_kvm_guest.sh
@end verbatim
@end example

@itemize

@item guest number

If it is a guest, for host system use 0.

@item test_program

startet after boot by the PRC

@item runtime

The wanted time, how long it runs, in seconds, this value will be used
to set an environment variable @code{TAPPER_TS_RUNTIME}, which is
used by the test suite wrappers.

@item timeout_testprogram

Time that the testprogram is given to run, at most, after that it is
killed (SIGINT, SIGKILL).

@item guests

Only used for virtualization tests. Contains an array, one entry per
guest which defines how a guest is started. Can be a SVM file for Xen
or an executable for KVM.

@subsection type: exec

Defines which program to run at the installation phase.

@example
@verbatim
precondition_type: exec
filename: /bin/some_script.sh
options:
  - -v
  - --foo
  - --bar="hot stuff"
@end verbatim
@end example

The quotes in this example are actually wrong but left in so you learn
the following lesson:

@subsection type: hint

Such a precondition provides hints where normal behaviour needs to be
changed. It contains any hash keys needed for the special handling. The
special handling itself is done in the MCP and needs to be prepared
for what you specify here. 

We currently use it to handle SimNow testing.

@example
@example
@verbatim
precondition_type: hint
simnow: 1
script: family10_sles10_xen.simnow
@end verbatim
@end example
@end example

@subsection quote subtleties

Please note some subtlety about quotes.

@itemize

@item This is YAML. And YAML provides its own way of quoting.

So this

@example
@example
@verbatim
precondition_type: exec
filename: /bin/some_script.sh
options:
  - --foo
@end verbatim
@end example
@end example

and this

@example
@example
@verbatim
precondition_type: exec
filename: /bin/some_script.sh
options:
  - "--foo"
@end verbatim
@end example
@end example

are actually the same (the value is always: @code{--foo}) because
quotes at the beginning and end of a YAML line are used by YAML. When
you use quotes at other places like in

@example
@example
@verbatim
precondition_type: exec
filename: /bin/some_script.sh
options:
  - --bar="hot stuff"
@end verbatim
@end example
@end example

then they are not part of the YAML line but part of the value, so this
time the value is: @code{--bar="hot stuff"}.

@item Quotes are not shell quotes.

So if you used quotes and they are not YAML quotes but part of the
value then you should know that they are @strong{not} evaluated by a
shell when @code{some_script.sh} is called, because we use
@code{system()} without a shell layer to start it.

That's why in above example the quoted value @code{"hot stuff"} (with
quotes!) is given as parameter @code{--bar} to the program. This
usually @strong{not} what you want.

@item Summary: Yo nearly never need quotes.

This is good enough:

@example
@verbatim
precondition_type: exec
filename: /bin/some_script.sh
options:
  - -v
  - --foo
  - --bar=hot stuff
@end verbatim
@end example

@end itemize

@subsection type: reboot

Requests a reboot test and states how often to reboot.

@strong{Note:} Reboot count of 1 actually means boot two times since
the first boot is always counted as number 0.

@example
@verbatim
precondition_type: reboot
count: 2
@end verbatim
@end example

@subsection type: autoinstall

Install a system using autoinstall scripts. The filename denotes the
grub config to be used. It is mandatory and can be given as absolut
path or relative to /data/tapper/.../repository/install_grub/. The
optional timeout is measured in second. If its absent a default value
is used.

@example
@verbatim
precondition_type: autoinstall
filename: suse/SLES10SP3_x86_64.lst
timeout: 1800
@end verbatim
@end example

@subsection type: testprogram

Define which test program to run. This way of defining a test program
should be prefered to using the @strong{PRC} type precondition. Only the
@strong{testprogram} precondition guarantees parsing that sets all
internal Tapper variables correctly.

@example
@verbatim
precondition_type: testprogram
runtime: 30
program: /bin/uname_tap.sh
timeout: 90
parameters:
- --verbose
@end verbatim
@end example


@subsection type: virt

A virtualization environment.

(The linebreaks with \ are not part of the actual file, but only for
this document.)

@example
@verbatim
precondition_type: virt
name: automatically generated Xen test
host:
  preconditions:
  - precondition_type: package
    filename: /data/tapper/live/repository/packages/xen/builds/\
              x86_64/xen-3.3-testing/\
              xen-3.3-testing.2009-03-20.18614_f54cf790ffc7.x86_64.tgz
  - precondition_type: package
    filename: /data/tapper/live/repository/packages/tapperutils/\
              sles10/xen_installer_suse.tar.gz
  - precondition_type: exec
    filename: /bin/xen_installer_suse.pl
  root:
    precondition_type: image
    partition: testing
    image: suse/suse_sles10_64b_smp_raw.tar.gz
    mount: /
    arch: linux64
  testprogram:
    execname: /opt/tapper/bin/tapper_testsuite_dom0_meta.sh
    timeout_testprogram: 10800
guests:
- config:
    precondition_type: copyfile
    protocol: nfs
    name: tapper:/data/tapper/live/repository/configs/\
                 xen/001-sandschaki-1237993266.svm
    dest: /xen/images/
    svm: /xen/images/001-sandschaki-1237993266.svm
  root:
    precondition_type: copyfile
    protocol: nfs
    arch: linux64
    name: osko:/export/image_files/official_testing/\
          redhat_rhel4u7_64b_up_qcow.img
    dest: /xen/images/
    mountfile: /xen/images/001-sandschaki-1237993266.img
    mounttype: raw
  testprogram:
    execname: /opt/tapper/bin/py_ltp
    timeout_after_testprogram: 10800
@end verbatim
@end example

@itemize

@item guest root always needs to name the file to mount since
its not easy or even impossible to get this name for some ways to install
the root image (like tar.gz packages or subdir)

@item guest root and guest config are installed inside the host, 
guest preconditions are installed inside the guest image

@item guests can be started with xm create $xenconf, evaluation of
$kvmconf or executing the $execconf script, thus only one of these 
three must be provided

@end itemize

@item '''Note''': virt instead of virtualisation is used to reduce 
confusion for users whether British English (virtualisation) or
American English (virtualization) is expected

@item key ``arch''
 arch: linux64 | linux32             (needed for for tapper toolchain)

@end itemize

@subsection General precondition keys ``mountfile''

These 2 options are possible in each precondition. With that you can
execute the precondition inside guest images:

@example
@verbatim
mountfile: ...
mountpartition: ...
mounttype: @TODO{is this the same as mountfile, mountpartition?}
@end verbatim
@end example

@itemize

@item 1. only mountfile: eg. rawimage, file loop-mounted

@item 2. only mountpartition: then mount that partition

@item 3. image file with partitions: mount the imagefile and from that
only the given partition

@end itemize

@menu
* Macro Preconditions::         
@end menu

@node Macro Preconditions
@section Macro Preconditions

This section describes macro precondition files as they are stored in
@code{/data/tapper/live/repository/macropreconditions/}.

A macro precondition denotes a file containing one or multiple
preconditions and additional TemplateToolkit code.

In most cases ``normal preconditions'' for similar tests will only
differ in one or very few keys. Thus precondition files could easily
be reused by only changing these few keys. This is made easier with
using ``macro preconditions''. 

The macro precondition file should contain all ``normal
preconditions'' to be reused. All variable keys should be substituted
by appropriate TemplateToolkit variables. When creating the new
testrun actual values for these TemplateToolkit variables have to
provided.

Macro preconditions are @strong{not} stored in the database. They are
only a tool to ease the creation of preconditions. Only the
@strong{resulting} preconditions are stored in database.

To make parsing macro preconditions easier required and optional
fields can be named after a comment field in the first lines of the
file after the keys @code{tapper-mandatory-fields} and
@code{tapper-optional-fields} respectively as in the following example:

@example
@verbatim
# tapper-mandatory-fields: id
# tapper-optional-fields: kernel
@end verbatim
@end example

These @code{# tapper-*} headers are also used in web frontend to
render forms out of it and submit testruns from there.

The values for the placeholders can be filled via such a command line:

@example
@verbatim
$ tapper-testrun new [all usual options] \
     --macroprecond=FILENAME \
      -Did=value1 \
      -Dkernel=2.6.37
@end verbatim
@end example

The FILENAME is a complete filename with absolute path.

There is no restriction on TemplateToolkit code for variable
substitution. The following example could be used to generate a
default value for the precondition key id.

@example
@verbatim
[%id = BLOCK%][%IF id%][%id%][%ELSE%]2009-06-29-perfmon[%END%][%END%]
@end verbatim
@end example

@menu
* A real live example - kernel boot test::  
@end menu

@node A real live example - kernel boot test,  , Macro Preconditions, Macro Preconditions
@subsection A real live example - kernel boot test

@itemize

@item Macroprecondition

@example
@verbatim
# tapper-mandatory-fields: kernel_version
# tapper-optional-fields: kernelpkg
---
precondition_type: image
arch: linux64
image: suse/suse_sles10_64b_smp_raw.tar.gz
mount: /
partition: testing
---
precondition_type: copyfile
name: /data/tapper/live/repository/testprograms/uname_tap/uname_tap.sh
dest: /bin/
protocol: local
---
precondition_type: copyfile
name: /data/tapper/live/repository/packages/tapperutils/kernel/gen_initrd.sh
dest: /bin/
protocol: local
---
[% kernelpkg = BLOCK %]\
[% IF kernelpkg %]\
[% kernelpkg %]\
[%ELSE%]kernel/linux-[% kernel_version %].tar.gz[% END %]\
[% END %]
precondition_type: package
filename: [% kernelpkg %]
---
precondition_type: exec
filename: /bin/gen_initrd.sh
options:
  - [% kernel_version %]
---
precondition_type: prc
config:
      runtime: 30
      test_program: /bin/uname_tap.sh
      timeout_testprogram: 90
@end verbatim
@end example


@item The test script

The test script @code{uname_tap.sh} to which the macro precondition
refers is just a shell script that examines uname output:

@example
@verbatim
#! /bin/sh
echo "1..2"
echo "# Tapper-Suite-Name: Kernel-Boot"
echo "# Tapper-Suite-Version: 1.00"
echo "# Tapper-Machine-Name: " `hostname`

if [ x`uname` != xLinux ] ; then echo -n "not " ; fi
echo "ok - We run on Linux"

if uname -a | grep -vq x86_64 ; then echo -n "not " ; fi
echo "ok - Looks like x86_64"
@end verbatim
@end example

@item Command line

Once you wrote the macro precondition and the test script all you need
is this command line:

@example
@verbatim
tapper-testrun new \
  --hostname=dickstone \
  --macroprecond \
    /data/tapper/live/repository/macropreconditions/kernel/kernel_boot.mpc \
   -Dkernelpkg=perfmon-682-x86_64.tar.gz \
   -Dkernel_version=2.6.28-rc3
@end verbatim
@end example

or with some more information (owner, topic):

@example
@verbatim
tapper-testrun new \
  --owner=mhentsc3 \
  --topic=Kernel \
  --hostname=dickstone \
  --macroprecond \
    /data/tapper/live/repository/macropreconditions/kernel/kernel_boot.mpc \
   -Dkernelpkg=perfmon-682-x86_64.tar.gz \
   -Dkernel_version=2.6.28-rc3
@end verbatim
@end example

@end itemize


@section Precondition Producers

Sometimes, parameters for preconditions shall be defined when the
testrun, this precondition is assigned to, is choosen for
execution. This might apply for example when you want to test the
newest build of a certain package. Also in combination with autorerun
testruns dynamic assignment of preconditions is useful. These testruns
are reinserted into the database automatically as soon as the
scheduler chooses them for execution. In this case dynamic
precondition assignment allows these rerun tests to differ
slightly. Preconditions with dynamically assigned parameters are
called @dfn{Lazy Precondition}.

Dynamic precondition assignment is implemented using @dfn{Precondition
Producers}. A producer is a modul that is called by the scheduler for
handling of lazy preconditions. To use a lazy preconditio the user has
to assign a precondition of type @samp{producer} to the testrun. This
precondition has to contain the basename of an existing producer
module and may contain additional parameters. The producer will
substitute the @samp{producer} precondition with a normal precondition
that has values assigned to all parameters.

@subsection Lazy precondition

Lets assume for example that you want to include the newest kernel
package into your test. This can be achieved with the existing
``Kernel'' producer. Instead of a precondition of type @samp{package}
with a certain filename you should assign the following precondition
to your testrun.

@example
@verbatim
precontition_type: producer
producer: Kernel
@end verbatim
@end example

This precondition will be substituted with a package precondition that
has the latest Sysint kernel build set as filename.

@subsection Producer API

Producer are modules loaded into the scheduler. Thus they need to be
written in Perl and reside inside the
@code{Tapper::MCP::Scheduler::PreconditionProducer::} namespace. A
producer has to implement a method @samp{produce}. This function gets
a job object as first parameter and a hash containing all additional
options from the precondition as second parameter. It suggested that
each producer inherits from
@code{Tapper::MCP::Scheduler::PreconditionProducer}. Producers shall
return a hash that has the produced preconditions as YAML text
assigned to the hash key @code{precondition_yaml}. An optional key
@code{topic} allows the producer to set the topic for the test. If the
hash key @code{error} is set, the associated error string is reported
and the testrun is cancled. In this case the other hash keys are not
evaluated.

@subsection Existing producers

Currently the following producers exist:

@itemize

@item DummyProducer.pm 

Dummy producer for testing.

@item Kernel.pm

Produces preconditions for kernel tests.

@item NewestPackage.pm

Produces a package precondition that installs the newest package from
a given directory.

@item SimnowKernel.pm

Produces preconditions for simnow kernel tests.

@item Temare.pm

Wraps the existing temare producer utility.

@end itemize


@subsection Example: ``Kernel'' precondition producer

The kernel producer returns a package precondition that contains the
latest kernel package from the kernel package path. Furthermore, it
returns an exec precondition that triggers the creation of an initrd
file for the kernel.

Valid options:
@itemize

@item arch

May be x86_64 or i686. The latest kernel package from the associated
path are used.

@item version

Only use kernel packages that contain the given version string

@item stable

Use stable kernels when true

@end itemize

@subsubsection Lazy precondition

The lazy precondition, pointing to the ``Kernel'' precondition
producer:

@example
@verbatim
precondition_type: produce
producer: Kernel
arch: i686
version: 2.6.32
stable: 1
@end verbatim
@end example

@subsubsection Resulting preconditions

The resulting preconditions may look like this:

@example
@verbatim
---
precondition_type: package
filename: kernel/stable/i686/kernel-2.6.32-rc1.tar.gz
---
precondition_type: exec
filename: /bin/gen_initrd.sh
options:
  - 2.6.32-rc1
@end verbatim
@end example

